{"version":3,"sources":["reducers/dictionarySlice.js","components/TableItem.js","components/Table.js","components/Content.js","App.js","reducers/store.js","index.js"],"names":["getDictionaryAsync","createAsyncThunk","a","fetch","res","ok","json","dictData","data","addWordtoDictAsync","payload","method","body","JSON","stringify","word","headers","console","log","dictionarySlice","id","wordData","createSlice","name","initialState","reducers","extraReducers","fulfilled","state","action","pending","push","truncate","str","length","substr","TableItem","item","useState","modal","setModal","style","textTransform","items","category","definitions","className","onClick","isOpen","ariaHideApp","toUpperCase","class","aria-hidden","map","e","def","Table","searchWord","dispatch","useDispatch","useSelector","dictionary","useEffect","scope","filter","toLowerCase","includes","Content","props","setWord","setSearchWord","type","onChange","target","value","replace","placeholder","autoComplete","preventDefault","alert","App","configureStore","reducer","dictionaryReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.f834173c.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const getDictionaryAsync = createAsyncThunk(\r\n  \"dictionary/getDictAsync\",\r\n  async () => {\r\n    let res = await fetch(\"https://vocabulary-app-be.herokuapp.com/dictionary\");\r\n    if (res.ok) {\r\n      let dictData = await res.json();\r\n      return dictData.data;\r\n    }\r\n  }\r\n);\r\n\r\nexport const addWordtoDictAsync = createAsyncThunk(\r\n  \"dictionary/addWordtoDictAsync\",\r\n  async (payload) => {\r\n    let res = await fetch(\r\n      \"https://vocabulary-app-be.herokuapp.com/dictionary\",\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ word: payload.word }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n    if (res.ok) {\r\n      let data = await res.json();\r\n      console.log(data);\r\n      return { data };\r\n    }\r\n  }\r\n);\r\n\r\nexport const searchWordAsync = createAsyncThunk(\r\n  \"dictionary/searchWordAsync\",\r\n  async (payload) => {\r\n    let res = await fetch(\r\n      `https://vocabulary-app-be.herokuapp.com/dictionary/${payload.id}`\r\n    );\r\n    if (res.ok) {\r\n      let wordData = await res.json();\r\n      console.log(wordData);\r\n      return wordData.data;\r\n    }\r\n  }\r\n);\r\n\r\nconst dictionarySlice = createSlice({\r\n  name: \"dictionary\",\r\n  initialState: [],\r\n  reducers: {},\r\n  extraReducers: {\r\n    [getDictionaryAsync.fulfilled]: (state, action) => {\r\n      return action.payload;\r\n    },\r\n    [getDictionaryAsync.pending]: (state, action) => {\r\n      // console.log(\"Fetching Data\");\r\n    },\r\n    [addWordtoDictAsync.fulfilled]: (state, action) => {\r\n      state.push(action.payload.data);\r\n    },\r\n  },\r\n});\r\n\r\nexport default dictionarySlice.reducer;\r\n","import React, { useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\n\r\nfunction TableItem({ item }) {\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const openModal = () => {\r\n    setModal(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <tr key={item.id}>\r\n        <td style={{ textTransform: \"capitalize\" }}>{item.word}</td>\r\n        <td>\r\n          <b style={{ textTransform: \"capitalize\" }}>\r\n            {item.items && item.items[0].category} -{\" \"}\r\n          </b>\r\n          {item.items && truncate(item.items[0].definitions[0])}\r\n        </td>\r\n        <td>\r\n          <button className=\"btn btn-danger btn-sm \" onClick={openModal}>\r\n            View\r\n          </button>\r\n        </td>\r\n      </tr>\r\n      <Modal isOpen={modal} ariaHideApp={true}>\r\n        <div className=\"modal-header\">\r\n          <h3 className=\"modal-word-header\">\r\n            {item.word && item.word.toUpperCase()}\r\n          </h3>\r\n          <button\r\n            className=\"btn btn-danger btn-sm\"\r\n            onClick={() => setModal(false)}\r\n          >\r\n            <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n          </button>\r\n        </div>\r\n        <div className=\"model-content\">\r\n          <p>\r\n            {item.items &&\r\n              item.items.map((e) => {\r\n                return (\r\n                  <>\r\n                    <i>{e.category}</i>\r\n                    <ul>\r\n                      {e.definitions.map((def) => {\r\n                        return <li>{def}</li>;\r\n                      })}\r\n                    </ul>\r\n                  </>\r\n                );\r\n              })}\r\n          </p>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction truncate(str) {\r\n  if (str.length > 60) {\r\n    return str.substr(0, 60) + \"...\";\r\n  } else {\r\n    return str;\r\n  }\r\n}\r\n\r\nexport default TableItem;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getDictionaryAsync } from \"../reducers/dictionarySlice\";\r\n\r\nimport TableItem from \"./TableItem\";\r\n\r\nfunction Table({ searchWord }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const dictData = useSelector((state) => state.dictionary);\r\n\r\n  useEffect(() => {\r\n    dispatch(getDictionaryAsync());\r\n  }, [dispatch, dictData]);\r\n\r\n  return (\r\n    <table className=\"table table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">Word</th>\r\n          <th scope=\"col\">Description</th>\r\n          <th scope=\"col\"></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {dictData &&\r\n          dictData\r\n            .filter((e) =>\r\n              searchWord === \"\"\r\n                ? e\r\n                : e.word &&\r\n                  e.word.toLowerCase().includes(searchWord.toLowerCase())\r\n            )\r\n            .map((item) => (\r\n              <TableItem item={item} key={item.id} searchWord={searchWord} />\r\n            ))}\r\n        {/* <TableItem searchWord={searchWord} /> */}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  addWordtoDictAsync,\r\n  searchWordAsync,\r\n} from \"../reducers/dictionarySlice\";\r\n\r\nimport Table from \"./Table\";\r\n\r\nfunction Content(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const [word, setWord] = useState(\"\");\r\n  const [searchWord, setSearchWord] = useState(\"\");\r\n\r\n  const handleClick = (e) => {\r\n    e.preventDefault();\r\n    if (word === \"\") {\r\n      alert(\"Please enter a word to proceed\");\r\n    } else {\r\n      dispatch(addWordtoDictAsync({ word: word.toLowerCase() }));\r\n      alert(`${word} added to dictionary`);\r\n      setWord(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container content-wrapper\">\r\n      <div className=\"row\">\r\n        <div className=\"col-lg-6 col-sm-12\">\r\n          <input\r\n            type=\"text\"\r\n            id=\"word\"\r\n            onChange={(e) => setWord(e.target.value.replace(/[^A-Za-z]/gi, \"\"))}\r\n            value={word}\r\n            placeholder=\"Enter the word..\"\r\n            autoComplete=\"off\"\r\n          />\r\n          <button className=\"btn-primary add-word\" onClick={handleClick}>\r\n            Add Word\r\n          </button>\r\n        </div>\r\n        <div className=\"col-lg-6 col-sm-12\">\r\n          <input\r\n            type=\"text\"\r\n            id=\"search-word\"\r\n            placeholder=\"Search\"\r\n            onChange={(e) =>\r\n              setSearchWord(e.target.value.replace(/[^A-Za-z]/, \"\"))\r\n            }\r\n            value={searchWord}\r\n            autoComplete=\"off\"\r\n          />\r\n        </div>\r\n        <div className=\"col-lg-12 col-sm-12 table-content\">\r\n          <Table searchWord={searchWord} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n","import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Content from \"./components/Content\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"app-header\">Welcome to Vocabulary App</h1>\n      <Content />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport dictionaryReducer from \"./dictionarySlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    dictionary: dictionaryReducer,\r\n  },\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./reducers/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}